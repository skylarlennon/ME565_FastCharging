%% MECHENG 565 Project: Fast Charging Group 1
clc;clear;close all;
%% ===============Contributors===============
% Vijay Balasekaran     vbalasek@umich.edu
% Clayton Garmon        cjgarmon@umich.edu
% Skylar Lennon         skylarl@umich.edu
% Justin Ryu            jusryu@umich.edu
% Emma Tum Suden        emmadt@umich.edu

%% ===============Parameters===============
LoadBatteryParams;

profileNumber = 3;      % 1 = CC
                        % 2 = CCCV
                        % 3 = P1

% Constants for all profiles
delta_t = 1;
time = [];
current = [];
chareTimeGoal = 9*60; %seconds (typical fast charging speed)
total_time = 60*60; % greater to ensure sim finishes.
V_des = 321.13;            % initial CV target voltage (V)
SOC_target = 0.80;

% Parameters for CC Current Profile
I_CC = -500;             % starting CC current (A)

% Parameters for CC-CV Current Profile
I_CCCV_Init = -700;      % starting CC portion of CCCV (A)

% ==== Parameters for P1 Current Profile ====
profile_path = 'csv/P1_current_profile.csv';  % adjust path as needed
profile_shape = readmatrix(profile_path);     % assumes 2 columns: [raw_time, raw_current]
raw_time = profile_shape(:,1);
raw_current = profile_shape(:,2);
time_shape = (raw_time - min(raw_time)) / (max(raw_time) - min(raw_time));
current_flipped = -1 * raw_current;
current_shape = rescale(current_flipped, -1, 0);  % now ranges from -1 to 0
max_current = -800;   % Starting max current (A), most negative
min_current = -00;    % Starting min current (A), least negative

% Iteration parameters
max_iter = 200;
iter = 0;
done = false;
tolerance = 5; % seconds

current_iterations = {};
time_iterations = {};
vt_iterations = {};
soc_iterations = {};

%% ==================== Optimization Loop ====================

while ~done && iter < max_iter
    iter = iter + 1;
    fprintf("\n--- Iteration %d ---\n", iter);

    % Regenerate current profile
    switch profileNumber
        case 1  % Constant Current
            time = [0:delta_t:total_time]';
            current = I_CC * ones(length(time),1);
            timeCurrentData = timeseries(current, time);
            sim("battery_pack.slx");

        case 2  % CC-CV
            assignin('base', 'I_CCCV_Init', I_CCCV_Init);
            assignin('base', 'V_des', V_des);  % CV voltage target
            sim("battery_pack_CCCV.slx");
        case 3  % Current profile from paper
            scaled_time = time_shape * total_time;
            scaled_current = rescale(current_shape, max_current, min_current);
            timeCurrentData = timeseries(scaled_current, scaled_time);
            sim("battery_pack.slx");
        otherwise
            error("Unsupported profileNumber for optimization")
    end

    % Post-simulation processing
    GatherResults;
    SimThermal;

    % =========UPDATED STORAGE=========
    current_iterations{end+1} = currentOut(:);  % store as column
    time_iterations{end+1} = simTime(:);
    vt_iterations{end+1} = VtOut(:);
    soc_iterations{end+1} = SOCOut(:);

    % Metrics
    final_SOC = SOCOut(end);
    charge_time = simTime(end);
    max_temp = max(Tc(:));

    fprintf("SOC = %.3f | Time = %.1f s | Max T = %.2f °C\n", final_SOC, charge_time, max_temp);

    % Check all conditions
    soc_met = final_SOC >= SOC_target;
    time_met = abs(charge_time - chareTimeGoal) <= tolerance;  % time must be within ±tolerance
    temp_met = max_temp < TcMax;

    if soc_met && time_met && temp_met
        fprintf("✅ All charging constraints met (within %.0f sec tolerance).\n", tolerance);
        done = true;
        break;
    end

    % Adjust inputs based on which constraints failed and which current
    % profile you're running
    switch profileNumber
        case 1  % CC adjustment
            if ~soc_met || (charge_time > chareTimeGoal + tolerance)
                I_CC = I_CC - 25; % increase charging rate (more negative)
            elseif charge_time < chareTimeGoal - tolerance
                I_CC = I_CC + 15; % decrease charging rate (less negative)
            end
            if ~temp_met
                I_CC = I_CC + 10; % back off further if too hot
            end
        case 2  % CCCV adjustment
            if ~soc_met || (charge_time > chareTimeGoal + tolerance)
                V_des = V_des + 0.05;  % increase target voltage (push harder)
                % I_CCCV_Init = I_CCCV_Init - 25;
            elseif charge_time < chareTimeGoal - tolerance
                V_des = V_des - 0.05;
                % I_CCCV_Init = I_CCCV_Init + 15;
            end
            if ~temp_met
                I_CCCV_Init = I_CCCV_Init + 10;
            end
        case 3  % P1-1 profile amplitude adjustment
            if ~soc_met || (charge_time > chareTimeGoal + tolerance)
                % Too slow: increase magnitude
                max_current = max_current - 25;  % more aggressive (more negative)
                min_current = min_current - 10;
            elseif charge_time < chareTimeGoal - tolerance
                % Too fast: reduce magnitude
                max_current = max_current + 15;
                min_current = min_current + 10;
            end
            if ~temp_met
                max_current = max_current + 10;
                min_current = min_current + 5;
            end
    end
end

if ~done
    fprintf("⚠️ Constraints not met after %d iterations.\n", max_iter);
end

%% Save the Outputs for SimSOHIterations
% Define uniform time vector to scale to
resample_time = (0:1:chareTimeGoal)';  % 1-second resolution

% Interpolate current to match target time resolution
current_scaled = interp1(simTime(:), currentOut(:), resample_time, 'linear', 'extrap');

% Save the data to the correct location
switch profileNumber
    case 1
        data = [resample_time, current_scaled];
        writematrix(data, "csv_final/CC_final.csv");
    case 2
        data = [resample_time, current_scaled];
        writematrix(data, "csv_final/CCCV_final.csv");
    case 3
        data = [resample_time, current_scaled];
        writematrix(data, "csv_final/P1_final.csv");
end

%% ========= Plot Current, Voltage, and SOC Profiles Over Iterations =========
figure;

n_iter = length(current_iterations);

% ----- Current Plot -----
subplot(3,1,1)
hold on; grid on;
title('P1 Current Profile Iterations');
xlabel('Time [s]');
ylabel('Current [A]');

for k = 1:n_iter-1
    plot(time_iterations{k}, current_iterations{k}, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
end
h_prev = plot(nan, nan, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
h_final = plot(time_iterations{end}, current_iterations{end}, 'r', 'LineWidth', 2.5);
xline(chareTimeGoal, '--k', 'LineWidth', 1.5);
legend([h_prev, h_final], {'Previous Iterations', 'Final Successful Iteration'}, 'Location', 'best');


% ----- Voltage Plot -----
subplot(3,1,2)
hold on; grid on;
title('Voltage Profile Iterations');
xlabel('Time [s]');
ylabel('Terminal Voltage [V]');

for k = 1:n_iter-1
    plot(time_iterations{k}, vt_iterations{k}, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
end
h_prev_vt = plot(nan, nan, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
h_final_vt = plot(time_iterations{end}, vt_iterations{end}, 'r', 'LineWidth', 2.5);
yline(Vtmax, ':m', 'LineWidth', 1.5);
xline(chareTimeGoal, '--k', 'LineWidth', 1.5);
legend([h_prev_vt, h_final_vt], {'Previous Iterations', 'Final Successful Iteration'}, 'Location', 'best');


% ----- SOC Plot -----
subplot(3,1,3)
hold on; grid on;
title('SOC Profile Iterations');
xlabel('Time [s]');
ylabel('State of Charge');

for k = 1:n_iter-1
    plot(time_iterations{k}, soc_iterations{k}, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
end
h_prev_soc = plot(nan, nan, 'Color', [0.6, 0.6, 0.6], 'LineWidth', 1);
h_final_soc = plot(time_iterations{end}, soc_iterations{end}, 'r', 'LineWidth', 2.5);
xline(chareTimeGoal, '--k', 'LineWidth', 1.5);
legend([h_prev_soc, h_final_soc], {'Previous Iterations', 'Final Successful Iteration'}, 'Location', 'best');
